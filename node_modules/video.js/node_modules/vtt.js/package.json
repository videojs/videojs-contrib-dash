{
  "author": {
    "name": "Andreas Gal",
    "email": "gal@mozilla.com"
  },
  "name": "vtt.js",
  "description": "A JavaScript implementation of the WebVTT specification.",
  "version": "0.12.1",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mozilla/vtt.js.git"
  },
  "homepage": "https://github.com/mozilla/vtt.js",
  "devDependencies": {
    "grunt": "0.4.1",
    "grunt-cli": "0.1.9",
    "grunt-contrib-jshint": "0.10.0",
    "grunt-contrib-uglify": "0.5.0",
    "grunt-contrib-concat": "0.4.0",
    "mocha": "1.20.1",
    "difflet": "git://github.com/humphd/difflet.git#714b82706ad39d75275a886aeff637df5097626f",
    "underscore": "1.6.0",
    "optimist": "0.6.1",
    "dive": "0.3.1",
    "async": "0.9.0",
    "grunt-bump": "0.0.14",
    "json-stable-stringify": "1.0.0",
    "node-vtt": "1.1.7",
    "text-encoding": "0.1.0",
    "grunt-mocha-test": "0.11.0"
  },
  "main": "lib/index.js",
  "files": [
    "dist/",
    "lib/browser.js",
    "lib/index.js",
    "lib/vtt.js",
    "lib/vttcue.js",
    "lib/vttcue-extended.js",
    "lib/vttregion.js",
    "lib/vttregion-extended.js"
  ],
  "keywords": [
    "vtt",
    "webvtt",
    "track",
    "captions",
    "subtitles",
    "text track"
  ],
  "scripts": {
    "test": "grunt"
  },
  "license": {
    "type": "Apache-2.0",
    "url": "https://github.com/mozilla/vtt.js/blob/master/LICENSE"
  },
  "contributors": [
    {
      "name": "This is an",
      "url": "incomplete"
    },
    {
      "name": "codebase which lives in this repository. If you make a contribution"
    },
    {
      "name": "here, you may add your name and, optionally, email address in the"
    },
    {
      "name": "appropriate place."
    },
    {
      "name": "Andreas Gal",
      "email": "gal@mozilla.com"
    },
    {
      "name": "Rick Eyre",
      "email": "rick.eyre@hotmail.com"
    },
    {
      "name": "David Humphrey",
      "email": "david.humphrey@senecacollege.ca"
    },
    {
      "name": "Jeffrey Espiritu",
      "email": "jeff_pro3@hotmail.com"
    },
    {
      "name": "Alex Kotliar",
      "email": "alexkotliar@gmail.com"
    },
    {
      "name": "Ali Al Dallal",
      "email": "ali@alicoding.com"
    },
    {
      "name": "Edwin Lim",
      "email": "limed3@gmail.com"
    },
    {
      "name": "Michael Afidchao",
      "email": "mdafidchao@learn.senecac.on.ca"
    },
    {
      "name": "Shayan Ahmad",
      "email": "szahmad@learn.senecac.on.ca"
    },
    {
      "name": "Jordan Raffoul",
      "email": "raffoul.jordan@gmail.com"
    },
    {
      "name": "Vince Lee",
      "email": "vince.lee.lien@gmail.com"
    },
    {
      "name": "Kyle Barnhart",
      "email": "kyle@barnhart.ca"
    },
    {
      "name": "Mandeep Garg",
      "email": "mkgarg1@learn.senecac.on.ca"
    },
    {
      "name": "Dale Karp",
      "email": "me@dale.io"
    },
    {
      "name": "Marcus Saad",
      "email": "mv.nsaad@gmail.com"
    },
    {
      "name": "Cyril Concolato",
      "email": "cyril.concolato@telecom-paristech.fr"
    }
  ],
  "gitHead": "8ea664e257ec7b5c092f58ac989e3134ff536a7a",
  "readme": "vtt.js\n======\n\n[![Build Status](https://travis-ci.org/mozilla/vtt.js.svg?branch=master)](https://travis-ci.org/mozilla/vtt.js) [![npm-version](http://img.shields.io/npm/v/vtt.js.svg)](https://www.npmjs.org/package/vtt.js) [![Dependency Status](https://david-dm.org/mozilla/vtt.js.svg?theme=shields.io)](https://david-dm.org/mozilla/vtt.js) [![devDependency Status](https://david-dm.org/mozilla/vtt.js/dev-status.svg?theme=shields.io)](https://david-dm.org/mozilla/vtt.js#info=devDependencies)\n\nImplementation of the [WebVTT](https://developer.mozilla.org/en-US/docs/HTML/WebVTT) spec in JavaScript. Can be used\nin NodeJS, on the browser, and many other places. Mozilla uses this implementation for parsing and processing WebVTT\nfiles in Firefox/Gecko.\n\n##Table of Contents##\n\n- [Spec Compliance](#spec-compliance)\n- [API](#api)\n  - [WebVTT.Parser](#webvttparser)\n    - [parse(data)](#parsedata)\n    - [flush()](#flush)\n    - [onregion(region)](#onregionregion)\n    - [oncue(cue)](#oncuecue)\n    - [onflush()](#onflush)\n    - [onparsingerror(error)](#onparsingerrorerror)\n  - [WebVTT.convertCueToDOMTree(window, cuetext)](#webvttconvertcuetodomtreewindow-cuetext)\n  - [WebVTT.processCues(window, cues, overlay)](#webvttprocesscueswindow-cues-overlay)\n  - [ParsingError](#parsingerror)\n  - [VTTCue](#vttcue)\n    - [Extended API](#extended-api)\n      - [toJSON()](#tojson)\n      - [VTTCue.fromJSON(json)](#vttcuefromjsonjson)\n      - [VTTCue.create(options)](#vttcuecreateoptions)\n  - [VTTRegion](#vttregion)\n    - [Extended API](#extended-api-1)\n        - [VTTRegion.fromJSON(json)](#vttregionfromjsonjson)\n        - [VTTRegion.create(options)](#vttregioncreateoptions)\n- [Browser](#browser)\n  - [Building Yourself](#building-yourself)\n  - [Bower](#bower)\n  - [Usage](#usage)\n- [Node](#node)\n  - [vtt.js](#vttjs-1)\n  - [node-vtt](#node-vtt)\n- [Developing vtt.js](#developing-vttjs)\n  - [Tests](#tests)\n    - [Writing Tests](#writing-tests)\n  - [Grunt Run Task](#grunt-run-task)\n\nSpec Compliance\n===============\n\n- [Parsing](http://dev.w3.org/html5/webvtt/#webvtt-file-format-parsing) (Completed)\n  - [File](http://dev.w3.org/html5/webvtt/#webvtt-file-parsing) (Completed)\n  - [Region](http://dev.w3.org/html5/webvtt/#webvtt-region-settings-parsing) (Completed)\n  - [Cue Timings and Settings](http://dev.w3.org/html5/webvtt/#webvtt-cue-timings-and-settings-parsing) (Completed)\n  - [WebVTT Cue Text](http://dev.w3.org/html5/webvtt/#dfn-webvtt-cue-text-parsing-rules) (Completed)\n  - [Cue DOM Construction](http://dev.w3.org/html5/webvtt/#webvtt-cue-text-dom-construction-rules) (Completed)\n- [Rendering](http://dev.w3.org/html5/webvtt/#rendering) (In Progress)\n  - [Processing Model](http://dev.w3.org/html5/webvtt/#processing-model) (In Progress) ***No VTTRegion or vertical text support***\n    - [Apply WebVTT Cue Settings](http://dev.w3.org/html5/webvtt/#dfn-apply-webvtt-cue-settings) (In Progress)\n      - Steps 1 - 11 (Completed)\n      - Step 12 (In progress)\n  - [Applying CSS Properties](http://dev.w3.org/html5/webvtt/#applying-css-properties-to-webvtt-node-objects) (Completed)\n  - [CSS Extensions](http://dev.w3.org/html5/webvtt/#css-extensions) **(Won't Implement)**\n- [WebVTT API Shim](http://dev.w3.org/html5/webvtt/#webvtt-api-for-browsers) (Completed)\n  - [VTTCue](http://dev.w3.org/html5/webvtt/#vttcue-interface) (Completed) ***Shims the TextTrackCue interface as well***\n  - [VTTRegion](http://dev.w3.org/html5/webvtt/#vttregion-interface) (Completed)\n\n###Notes###\n\nOur processing model portion of the specification makes use of a custom property, `hasBeenReset`. It allows us to detect\nwhen a VTTCue is dirty, i.e. one of its properties that affects display has changed and so we need to recompute its display\nstate. This allows us to reuse a cue's display state if it has already been computed and nothing has changed to effect its\nposition.\n\nAPI\n===\n\n####WebVTT.Parser####\n\nThe parser has a simple API:\n\n```javascript\nvar parser = new WebVTT.Parser(window, stringDecoder);\nparser.onregion = function(region) {};\nparser.oncue = function(cue) {};\nparser.onflush = function() {};\nparser.onparsingerror = function(e) {};\nparser.parse(moreData);\nparser.parse(moreData);\nparser.flush();\n```\n\nThe Parser constructor is passed a window object with which it will create new\nVTTCues and VTTRegions as well as an optional StringDecoder object which\nit will use to decode the data that the `parse()` function receives. For ease of\nuse, a StringDecoder is provided via `WebVTT.StringDecoder()`. If a custom\nStringDecoder object is passed in it must support the API specified by the\n[#whatwg string encoding](http://encoding.spec.whatwg.org/#api) spec.\n\n####parse(data)####\n\nHands data in some format to the parser for parsing. The passed data format\nis expected to be decodable by the StringDecoder object that it has. The parser\ndecodes the data and reassembles partial data (streaming), even across line breaks.\n\n```javascript\nvar parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\nparser.parse(\"WEBVTT\\n\\n\");\nparser.parse(\"00:32.500 --> 00:33.500 align:start size:50%\\n\");\nparser.parse(\"<v.loud Mary>That's awesome!\");\nparser.flush();\n```\n\n####flush()####\n\nIndicates that no more data is expected and will force the parser to parse any\nunparsed data that it may have. Will also trigger [onflush](#onflush).\n\n####onregion(region)####\n\nCallback that is invoked for every region that is correctly parsed. Returns a [VTTRegion](#http://dev.w3.org/html5/webvtt/#dfn-vttregion)\nobject.\n\n```js\nparser.onregion = function(region) {\n  console.log(region);\n};\n```\n\n####oncue(cue)####\n\nCallback that is invoked for every cue that is fully parsed. In case of streaming parsing oncue is\ndelayed until the cue has been completely received. Returns a [VTTCue](#http://dev.w3.org/html5/webvtt/#vttcue-interface) object.\n\n```js\nparser.oncue = function(cue) {\n  console.log(cue);\n};\n```\n\n####onflush()####\n\nIs invoked in response to `flush()` and after the content was parsed completely.\n\n```js\nparser.onflush = function() {\n  console.log(\"Flushed\");\n};\n```\n\n####onparsingerror(error)####\n\nIs invoked when a parsing error has occured. This means that some part of the\nWebVTT file markup is badly formed. See [ParsingError](#parsingerror) for more\ninformation.\n\n```js\nparser.onparsingerror = function(e) {\n  console.log(e);\n};\n```\n\n####WebVTT.convertCueToDOMTree(window, cuetext)####\n\nParses the cue text handed to it into a tree of DOM nodes that mirrors the internal WebVTT node structure of\nthe cue text. It uses the window object handed to it to construct new HTMLElements and returns a tree of DOM\nnodes attached to a top level div.\n\n```javascript\nvar div = WebVTT.convertCueToDOMTree(window, cuetext);\n```\n\n####WebVTT.processCues(window, cues, overlay)####\n\nConverts the cuetext of the cues passed to it to DOM trees&mdash;by calling convertCueToDOMTree&mdash;and\nthen runs the processing model steps of the WebVTT specification on the divs. The processing model applies the necessary\nCSS styles to the cue divs to prepare them for display on the web page. During this process the cue divs get added\nto a block level element (overlay). The overlay should be a part of the live DOM as the algorithm will use the\ncomputed styles (only of the divs to do overlap avoidance.\n\n```javascript\nvar divs = WebVTT.processCues(window, cues, overlay);\n```\n\n####ParsingError####\n\nA custom JS error object that is reported through the\n[onparsingerror](#onparsingerror) callback. It has a `name`, `code`, and\n`message` property, along with all the regular properties that come with a\nJavaScript error object.\n\n```json\n{\n  \"name\": \"ParsingError\",\n  \"code\": \"SomeCode\",\n  \"message\": \"SomeMessage\"\n}\n```\n\nThere are two error codes that can be reported back currently:\n\n- 0 BadSignature\n- 1 BadTimeStamp\n\n**Note:** Exceptions other then `ParsingError` will be thrown and not reported.\n\n####VTTCue####\n\nA DOM shim for the VTTCue. See the [spec](http://dev.w3.org/html5/webvtt/#vttcue-interface)\nfor more information. Our VTTCue shim also includes properties of its abstract base class\n[TextTrackCue](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#texttrackcue).\n\n```js\nvar cue = new window.VTTCue(0, 1, \"I'm a cue.\");\n```\n\n**Note:** Since this polfyill doesn't implement the track specification directly the `onenter`\nand `onexit` events will do nothing and do not exist on this shim.\n\n####Extended API####\n\nThere is also an extended version of this shim that gives a few convenience methods\nfor converting back and forth between JSON and VTTCues. If you'd like to use these\nmethods then us `vttcue-extended.js` instead of `vttcue.js`. This isn't normally\nbuilt into the `vtt.js` distributable so you will have to build a custom distribution\ninstead of using bower.\n\n####toJSON()####\n\nConverts a cue to JSON.\n\n```js\nvar json = cue.toJSON();\n```\n\n####VTTCue.fromJSON(json)####\n\nCreate and initialize a VTTCue from JSON.\n\n```js\nvar cue = VTTCue.fromJSON(json);\n```\n\n####VTTCue.create(options)####\n\nInitializes a VTTCue from an options object where the properties in the option\nobjects are the same as the properties on the VTTCue.\n\n```js\nvar cue = VTTCue.create(options);\n```\n\n####VTTRegion####\n\nA DOM shim for the VTTRegion. See the [spec](http://dev.w3.org/html5/webvtt/#vttregion-interface)\nfor more information.\n\n```js\nvar region = new window.VTTRegion(0, 1, \"I'm a region.\");\ncue.region = region;\n```\n\n####Extended API####\n\nThere is also an extended version of this shim that gives a few convenience methods\nfor converting back and forth between JSON and VTTRegions. If you'd like to use these\nmethods then us `vttregion-extended.js` instead of `vttregion.js`. This isn't normally\nbuilt into the `vtt.js` distributable so you will have to build a custom distribution\ninstead of using bower.\n\n####VTTRegion.fromJSON(json)####\n\nCreates and initializes a VTTRegion from JSON.\n\n```js\nvar region = VTTRegion.fromJSON(json);\n```\n\n####VTTRegion.create(options)####\n\nCreates a VTTRegion from an options object where the properties on the options\nobject are the same as the properties on the VTTRegion.\n\n```js\nvar region = VTTRegion.create(options);\n```\n\nBrowser\n=======\n\nIn order to use the `vtt.js` in a browser, you need to get the built distribution of vtt.js. The distribution\ncontains polyfills for [TextDecoder](http://encoding.spec.whatwg.org/), [VTTCue](http://dev.w3.org/html5/webvtt/#vttcue-interface),\nand [VTTRegion](http://dev.w3.org/html5/webvtt/#vttregion-interface) since not all browsers currently\nsupport them.\n\n###Building Yourself###\n\nBuilding a browser-ready version of the library is done using `grunt` (if you haven't installed\n`grunt` globally, you can run it from `./node_modules/.bin/grunt` after running `npm install`):\n\n```bash\n$ grunt build\n$ Running \"uglify:dist\" (uglify) task\n$ File \"dist/vtt.min.js\" created.\n\n$ Running \"concat:dist\" (concat) task\n$ File \"dist/vtt.js\" created.\n\n$ Done, without errors.\n```\n\nYour newly built `vtt.js` now lives in `dist/vtt.min.js`, or alternatively, `dist/vtt.js` for an\nunminified version.\n\n###Bower###\n\nYou can also get the a prebuilt distribution from [Bower](http://bower.io/). Either run the shell\ncommand:\n\n```bash\n$ bower install vtt.js\n```\n\nOr include `vtt.js` as a dependency in your `bower.json` file. `vtt.js` should now\nlive in `bower_components/vtt.js/vtt.min.js`. There is also an unminified\nversion included with bower at `bower_components/vtt.js/vtt.js`.\n\n###Usage###\n\nTo use `vtt.js` you can just include the script on an HTML page like so:\n\n```html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>vtt.js in the browser</title>\n  <script src=\"bower_components/vtt.js/vtt.min.js\"></script>\n</head>\n<body>\n  <script>\n    var vtt = \"WEBVTT\\n\\nID\\n00:00.000 --> 00:02.000\\nText\",\n        parser = new WebVTT.Parser(window, WebVTT.StringDecoder()),\n        cues = [],\n        regions = [];\n    parser.oncue = function(cue) {\n      cues.push(cue);\n    };\n    parser.onregion = function(region) {\n      regions.push(region);\n    }\n    parser.parse(vtt);\n    parser.flush();\n\n    var div = WebVTT.convertCueToDOMTree(window, cues[0].text);\n    var divs = WebVTT.processCues(window, cues, document.getElementById(\"overlay\"));\n  </script>\n  <div id=\"overlay\" style=\"position: relative; width: 300px; height: 150px\"></div>\n</body>\n</html>\n```\n\nNode\n====\n\nYou have a couple of options if you'd like to run the library from Node.\n\n###vtt.js###\n\n`vtt.js` is on npm. Just do:\n\n```\nnpm install vtt.js\n```\n\nRequire it and use it:\n\n```js\nvar vtt = require(\"vtt.js\"),\n    WebVTT = vtt.WebVTT,\n    VTTCue = vtt.VTTCue,\n    VTTRegion = vtt.VTTRegion;\n\nvar parser = new WebVTT.Parser(window);\nparser.parse();\n// etc\n\nvar elements = WebVTT.processCues(window, cues, overlay);\nvar element = WebVTT.convertCueToDOMTree(window, cuetext);\n\nvar cue = new VTTCue(0, 1, \"I'm a cue.\");\nvar region = new VTTRegion();\n```\n\nSee the [API](#api) for more information on how to use it.\n\n**Note:** If you use this method you will have to provide your own window object\nor a shim of one with the necessary functionality for either the parsing or processing\nportion of the spec. The only shims that are provided to you are `VTTCue` and `VTTRegion`\nwhich you can attach to your global that is passed into the various functions.\n\n###node-vtt###\n\nUse [node-vtt](https://github.com/mozilla/node-vtt). Node-vtt runs `vtt.js` on a PhantomJS page\nfrom Node so it has access to a full DOM and CSS layout engine which means you can run any part\nof the library you want. See the [node-vtt](https://github.com/mozilla/node-vtt) repo for more\ninformation.\n\nDeveloping vtt.js\n=================\n\nA few things to note:\n\n* When bumping the version remember to use the `grunt release` task as this will\nbump `package.json` + `bower.json` and build the `dist` files for `vtt.js` in one\ngo.\n* The [Grunt Run Task](#grunt-run-task) tool is handy for running the library without having\nto run the whole test suite or set of tests.\n\n####Tests####\n\nTests are written and run using [Mocha](http://visionmedia.github.io/mocha/) on node.js.\n\nTo run all the tests, do the following:\n\n```bash\n$ npm test\n```\n\nIf you want to run individual tests, you can install the [Mocha](http://visionmedia.github.io/mocha/) command-line\ntool globally, and then run tests per-directory:\n\n```bash\n$ npm install -g mocha\n$ cd tests/some/sub/dir\n$ mocha --reporter spec --timeout 200000\n```\n\nSee the [usage docs](http://visionmedia.github.io/mocha/#usage) for further usage info.\n\n###Writing Tests###\n\nTests are done by comparing live parsed output to a last-known-good JSON file. The JSON files\ncan be easily generated using `vtt.js`, so you don't need to write these by hand\n(see details below about [Grunt Run Task](#grunt-run-task)).\n\n####TestRunner####\n\nThere's a prebuilt API in place for testing different parts of `vtt.js`. Simply\nrequire the [TestRunner](https://github.com/mozilla/vtt.js/blob/master/tests/test-runner.js)\nmodule in the `lib` directory and start writing tests using `mocha`. See an example of a test file\n[here](https://github.com/mozilla/vtt.js/blob/master/tests/cue-settings/align/test.js)\nwith its first test's WebVTT file [here](https://github.com/mozilla/vtt.js/blob/master/tests/cue-settings/align/bad-align.vtt)\nand its corresponding [parsing JSON file](https://github.com/mozilla/vtt.js/blob/master/tests/cue-settings/align/bad-align.json)\nand [processing JSON file](https://github.com/mozilla/vtt.js/blob/master/tests/cue-settings/align/bad-align-proc.json).\nYou can also check out the [tests](https://github.com/mozilla/vtt.js/tree/master/tests)\ndirectory for more examples on how to write tests.\n\n####jsonEqual(vttFile, jsonRefFile, message, onDone)####\n\nFirst parses the WebVTT file as UTF8 and compares it to the reference JSON file\nand then parses the WebVTT file as a string and compares it to the reference JSON\nfile.\n\n####jsonEqualStreaming(vttFile, jsonRefFile, message, onDone)####\n\nSimulates parsing the file while streaming by splitting the WebVTT file into\nchunks. Will simulate parsing like this `n` times for a single WebVTT file where\n`n` is the length in unicode characters of the file, so use this only on small\nfiles or else you will get a timeout failure on your test.\n\n####jsonEqualParsing(vttFile, jsonRefFile, message, onDone)####\n\nRuns `jsonEqual` and `jsonEqualStreaming` in one go.\n\n####jsonEqualProcModel(vttFile, jsonRefFile, message, onDone)####\n\nRuns the processing model over the `VTTCues` and `VTTRegions` that are returned\nfrom parsing the WebVTT file.\n\n####jsonEqualAll(vttFile, jsonRefFile, message, onDone)####\n\nRuns `jsonEqualParsing` and `jsonEqualProcModel`. Note that `jsonRefFile` should\ncontain JSON that is generated from parsing. The processing model test will compare\nits results to a JSON file located at `[vttFile]-proc.json`. Therefore, if you\nhave a WebVTT file named `basic.vtt` the JSON reference file for the processing\nmodel tests will be `basic-proc.json`.\n\n####jsonEqualAllNoStream(vttFile, jsonRefFile, message, onDone)####\n\nRuns `jsonEqual` and `jsonEqualProcModel` use this if you want to do parsing\nand processing tests, but do not want to simulate streaming because you\nhave too big of a WebVTT file.\n\n###Grunt Run Task###\n\nYou can automatically generate a JSON file for a given `.vtt` file using the\n`run` Grunt task.\n\nTo get parsed JSON output from some WebVTT file do:\n\n```bash\n$ grunt run:my-vtt-file.vtt\n$ grunt run:my-vtt-file.vtt > my-json-file.json\n```\n\nTo get processed output from the WebVTT file do:\n\n```bash\n$ grunt run:my-vtt-file.vtt:p\n$ grunt run:my-vtt-file.vtt:p > my-json-file.json\n```\n\nBy passing the `c` flag you can automatically copy the output into a JSON file\nwith the same name as the WebVTT file:\n\n```bash\n$ grunt run:my-vtt-file.vtt:c\n$ grunt run:my-vtt-file.vtt:pc\n```\n\nThe parsed JSON output now lives in `my-vtt-file.json` and the processing JSON\noutput lives in `my-vtt-file-proc.json`.\n\nYou can also run it over a directory copying the output of parsing or\nprocessing each WebVTT file to a corresponding JSON file like so:\n\n```bash\n$ grunt run:my-vtt-file-directory\n$ grunt run:my-vtt-file-directory:p\n```\n\nThis is useful when you've modified how `vtt.js` works and each JSON file needs\na slight change.\n\nThe `run` task utilizes a script called `cue2json`, but\ndoes a few other things for you before each run like building a development\nbuild for `cue2json` to use. It's also a bit easier to type in the CL options\nfor the task. If you want to know more about `cue2json` you can run it directly\nlike so:\n\n```bash\n$ ./bin/cue2json.js \n$ Generate JSON test files from a reference VTT file.\n$ Usage: node ./bin/cue2json.js [options]\n$ \n$ Options:\n$   -v, --vtt      Path to VTT file.                                                                                     \n$   -d, --dir      Path to test directory. Will recursively find all JSON files with matching VTT files and rewrite them.\n$   -c, --copy     Copies the VTT file to a JSON file with the same name.                                                \n$   -p, --process  Generate a JSON file of the output returned from the processing model. \n```\n\n**Notes:** \n\n* `cue2json` utilizes the last development build done. This is why the Grunt `run` task is\ngood as you don't have to remember to build it yourself. If you don't build it yourself then you could\npotentially get incorrect results from it.\n* Since `cue2json` uses the actual parser to generate these JSON files there is the possibility that\nthe generated JSON will contain bugs. Therefore, always check the generated JSON files to check that the\nparser actually parsed according to spec.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/vtt.js/issues"
  },
  "_id": "vtt.js@0.12.1",
  "_shasum": "f0f11b8ce4d4a4f59b2d97d574388dfc62d6baad",
  "_from": "git+https://github.com/gkatsev/vtt.js.git#vjs-v0.12.1",
  "_resolved": "git+https://github.com/gkatsev/vtt.js.git#8ea664e257ec7b5c092f58ac989e3134ff536a7a"
}
